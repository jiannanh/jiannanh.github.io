<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiannanh.github.io</id>
    <title>Gridea</title>
    <updated>2020-08-09T08:25:21.368Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiannanh.github.io"/>
    <link rel="self" href="https://jiannanh.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jiannanh.github.io/images/avatar.png</logo>
    <icon>https://jiannanh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[计算机网络 - TCP/IP模型]]></title>
        <id>https://jiannanh.github.io/post/ji-suan-ji-wang-luo-tcpip-mo-xing/</id>
        <link href="https://jiannanh.github.io/post/ji-suan-ji-wang-luo-tcpip-mo-xing/">
        </link>
        <updated>2020-08-09T08:17:18.000Z</updated>
        <content type="html"><![CDATA[<p>TCP/IP是实时模型<br>
TCP/IP是先实践在生成的模型<br>
<img src="https://jiannanh.github.io/post-images/1596961494042.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络 - OSI分层]]></title>
        <id>https://jiannanh.github.io/post/ji-suan-ji-wang-luo-osi-fen-ceng/</id>
        <link href="https://jiannanh.github.io/post/ji-suan-ji-wang-luo-osi-fen-ceng/">
        </link>
        <updated>2020-08-09T06:33:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="osi-分层">OSI 分层</h2>
<p>7层OSI法定标准<br>
物理层 - 数据链路层 - 网络层 - 传输层 - 会话层- 表示层 - 应用层<br>
通信子网 -           - 资源子网<br>
物联网输会示用</p>
<p>5层体系结构，方便学习。<br>
4层事实模型</p>
<ol>
<li>
<p>应用层<br>
需要上网才能使用的程序</p>
</li>
<li>
<p>表示层<br>
处理两个通讯徐通中光交换信息的表示方式<br>
功能1：数据格式变换<br>
功能2：数据加密解密<br>
功能3：数据压缩和恢复</p>
</li>
<li>
<p>会话层<br>
建立连接并在连接上有序地传输数据。这就是会话也是建立同步（SYN）。<br>
功能1：建立、管理、终止会话<br>
功能2：使用校验点可是会话在通讯失效时从校验点、同步点继续灰度通讯，实现数据同步。</p>
</li>
<li>
<p>传输层<br>
负责主机中两个进程的通信，即端到端的通信。传输单位是保温段或用户数据报。<br>
1：可靠传输、不可靠传输<br>
2：差错控制<br>
3：流量控制<br>
4：复用分用</p>
</li>
<li>
<p>网络层<br>
主要任务是把分组从远端传到目的端，为分组交换网上的不同主机提供通信服务网络层传输单位是数据拥报。<br>
功能1：路由选择<br>
功能2：流量选择<br>
功能3：差错控制<br>
功能4：拥塞控制</p>
</li>
<li>
<p>数据链路层<br>
把网络层传下来的数据报组装成帧<br>
数据链路层/链路层的传输单位是帧。<br>
功能1：成帧<br>
功能2：差错控制<br>
功能3：流量控制<br>
功能4：访问（接入）控制</p>
</li>
<li>
<p>物理层<br>
主要任务是在物理媒体上实现比特流的透明传输。<br>
物理层传输单位是比特<br>
功能1：定义接口特性<br>
功能2：定义传输模式<br>
功能3：定义传输速率<br>
功能4：比特同步<br>
功能4：比特编码</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机网络 - 速率相关性能指标]]></title>
        <id>https://jiannanh.github.io/post/ji-suan-ji-wang-luo-su-lu-xiang-guan-xing-neng-zhi-biao/</id>
        <link href="https://jiannanh.github.io/post/ji-suan-ji-wang-luo-su-lu-xiang-guan-xing-neng-zhi-biao/">
        </link>
        <updated>2020-08-09T05:37:39.000Z</updated>
        <content type="html"><![CDATA[<p>塑料布及数据率或称数据传输率或比特率，<br>
比特 1 / 0<br>
链接在计算机网络上的主机在数字通道上传送数据的速率。<br>
1 byte = 8 bite</p>
<h2 id="带宽">带宽</h2>
<ol>
<li><strong>带宽</strong>原本值莫格信号具有的频带宽度，即最高频率与最低频率之差，单位是 Hz。</li>
<li>计算机网络中，<strong>带宽</strong>用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络 中的抹一点到零一点所能通过的 <font  color="red">最高数据率</font >。 单位是 ”比特每秒“，b/s，kb/s 。。、<br>
是网络设备所支持的最高速率</li>
</ol>
<h2 id="吞吐量">吞吐量</h2>
<p>单位时间内通过某个网络（或信道、接口）的数据量，单位是b/s，kb/s<br>
吞吐量收网络的带宽或者网络的额定速率的限制。</p>
<h2 id="时延">时延</h2>
<p>是数据（报文、分组、比特流）从网络（链路）的一端传送到另一端所需要的事件。也叫延迟或者迟延。单位是 s。<br>
时延 = 发送时延 + 传播时延 + 排队时延 + 处理时延</p>
<ol>
<li>
<p>发送时延<br>
从发送分组的第一个比特算起到该分组的最后一个比特发送所需要的时间。<br>
发送时延 = 数据长度 / 信道带宽</p>
</li>
<li>
<p>传播时延<br>
电磁波的传播速度和链路长度<br>
传播时延 = 链路长度 / 电磁波的传播速度</p>
</li>
<li>
<p>排队时延<br>
在路由器等待输入和输出的时间</p>
</li>
<li>
<p>处理时延<br>
检查找出口，路由器检查错误，并且决定从那个端口输出。</p>
</li>
<li>
<p>往返时延 RTT<br>
从发送方开始发送数据开始，到发送当接收到接收方是确认，总共时延。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RPC 是什么？]]></title>
        <id>https://jiannanh.github.io/post/rpc-shi-shi-me/</id>
        <link href="https://jiannanh.github.io/post/rpc-shi-shi-me/">
        </link>
        <updated>2020-08-08T09:02:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="rpc-是什么">RPC 是什么？</h1>
<h2 id="1-rpc是什么">1. RPC是什么</h2>
<p>RPC （Remote Procedure Call) 远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p>
<p>Rpc协议假定默写传输协议的存在，如 TCP 或 UDP，为通讯之间携带信息数据。在 OIS 网络通信模型之中， RPC 跨越了传输层和应用层。RPC 使得开发网络分布式多程序在内的应用程序变得更加容易。</p>
<h2 id="2-restful-和-rpc">2. Restful 和 RPC</h2>
<p><a href="https://baike.baidu.com/item/RESTful">restful 百度百科</a></p>
<blockquote>
<p>RESTFUL 是一种网络应用程序的设计风格和开发方式，基于 HTTP ，可以使用 XML 格式定义或 JSON 格式定义。RESTFUL 适用于移动互联网厂商作为业务使能接口的场景，实现第三方 OTT 调用移动网络资源的功能，动作类型为新增、变更、删除所调用资源。<br>
其实这两者并不是一个维度的概念，总得来说RPC涉及的维度更广。</p>
</blockquote>
<p>如果硬要比较，那么可以从RPC风格的url和Restful风格的url上进行比较。</p>
<p>比如你提供一个查询订单的接口，用RPC风格，你可能会这样写：</p>
<pre><code>/queryOrder?orderId=123
</code></pre>
<p>用Restful风格呢？</p>
<pre><code>Get  
/order?orderId=123
</code></pre>
<p>RPC是面向过程，Restful是面向资源，并且使用了Http动词。从这个维度上看，Restful风格的url在表述的精简性、可读性上都要更好。</p>
<h2 id="rpc没那么简单">RPC没那么简单</h2>
<p>要实现一个RPC不算难，难的是实现一个高性能高可靠的RPC框架。</p>
<p>比如，既然是分布式了，那么一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？</p>
<p>这时候就需要一个服务注册中心，比如在Dubbo里头，就可以使用Zookeeper作为注册中心，在调用时，从Zookeeper获取服务的实例列表，再从中选择一个进行调用。</p>
<p>那么选哪个调用好呢？这时候就需要负载均衡了，于是你又得考虑如何实现复杂均衡，比如Dubbo就提供了好几种负载均衡策略。</p>
<p>这还没完，总不能每次调用时都去注册中心查询实例列表吧，这样效率多低呀，于是又有了缓存，有了缓存，就要考虑缓存的更新问题，blablabla......</p>
<p>你以为就这样结束了，没呢，还有这些：</p>
<p>客户端总不能每次调用完都干等着服务端返回数据吧，于是就要支持异步调用；<br>
服务端的接口修改了，老的接口还有人在用，怎么办？总不能让他们都改了吧？这就需要版本控制了；<br>
服务端总不能每次接到请求都马上启动一个线程去处理吧？于是就需要线程池；<br>
服务端关闭时，还没处理完的请求怎么办？是直接结束呢，还是等全部请求处理完再关闭呢？<br>
......<br>
如此种种，都是一个优秀的RPC框架需要考虑的问题。</p>
<p>当然，接下来我们还是先实现一个简单的RPC，再在上面一步步优化！</p>
<h2 id="为什么要用-rpc">为什么要用 RPC</h2>
<p>无感知调用<br>
RPC 可以定制化，可以减少传输过程之中的一些损耗。<br>
RPC 基于的协议可能是 TCP 或者 UDP 让网络传输更快。</p>
]]></content>
    </entry>
</feed>