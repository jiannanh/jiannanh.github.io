<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiannanh.github.io</id>
    <title>Gridea</title>
    <updated>2020-08-08T09:03:05.542Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiannanh.github.io"/>
    <link rel="self" href="https://jiannanh.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://jiannanh.github.io/images/avatar.png</logo>
    <icon>https://jiannanh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[RPC 是什么？]]></title>
        <id>https://jiannanh.github.io/post/rpc-shi-shi-me/</id>
        <link href="https://jiannanh.github.io/post/rpc-shi-shi-me/">
        </link>
        <updated>2020-08-08T09:02:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="rpc-是什么">RPC 是什么？</h1>
<h2 id="1-rpc是什么">1. RPC是什么</h2>
<p>RPC （Remote Procedure Call) 远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。</p>
<p>Rpc协议假定默写传输协议的存在，如 TCP 或 UDP，为通讯之间携带信息数据。在 OIS 网络通信模型之中， RPC 跨越了传输层和应用层。RPC 使得开发网络分布式多程序在内的应用程序变得更加容易。</p>
<h2 id="2-restful-和-rpc">2. Restful 和 RPC</h2>
<p><a href="https://baike.baidu.com/item/RESTful">restful 百度百科</a></p>
<blockquote>
<p>RESTFUL 是一种网络应用程序的设计风格和开发方式，基于 HTTP ，可以使用 XML 格式定义或 JSON 格式定义。RESTFUL 适用于移动互联网厂商作为业务使能接口的场景，实现第三方 OTT 调用移动网络资源的功能，动作类型为新增、变更、删除所调用资源。<br>
其实这两者并不是一个维度的概念，总得来说RPC涉及的维度更广。</p>
</blockquote>
<p>如果硬要比较，那么可以从RPC风格的url和Restful风格的url上进行比较。</p>
<p>比如你提供一个查询订单的接口，用RPC风格，你可能会这样写：</p>
<pre><code>/queryOrder?orderId=123
</code></pre>
<p>用Restful风格呢？</p>
<pre><code>Get  
/order?orderId=123
</code></pre>
<p>RPC是面向过程，Restful是面向资源，并且使用了Http动词。从这个维度上看，Restful风格的url在表述的精简性、可读性上都要更好。</p>
<h2 id="rpc没那么简单">RPC没那么简单</h2>
<p>要实现一个RPC不算难，难的是实现一个高性能高可靠的RPC框架。</p>
<p>比如，既然是分布式了，那么一个服务可能有多个实例，你在调用时，要如何获取这些实例的地址呢？</p>
<p>这时候就需要一个服务注册中心，比如在Dubbo里头，就可以使用Zookeeper作为注册中心，在调用时，从Zookeeper获取服务的实例列表，再从中选择一个进行调用。</p>
<p>那么选哪个调用好呢？这时候就需要负载均衡了，于是你又得考虑如何实现复杂均衡，比如Dubbo就提供了好几种负载均衡策略。</p>
<p>这还没完，总不能每次调用时都去注册中心查询实例列表吧，这样效率多低呀，于是又有了缓存，有了缓存，就要考虑缓存的更新问题，blablabla......</p>
<p>你以为就这样结束了，没呢，还有这些：</p>
<p>客户端总不能每次调用完都干等着服务端返回数据吧，于是就要支持异步调用；<br>
服务端的接口修改了，老的接口还有人在用，怎么办？总不能让他们都改了吧？这就需要版本控制了；<br>
服务端总不能每次接到请求都马上启动一个线程去处理吧？于是就需要线程池；<br>
服务端关闭时，还没处理完的请求怎么办？是直接结束呢，还是等全部请求处理完再关闭呢？<br>
......<br>
如此种种，都是一个优秀的RPC框架需要考虑的问题。</p>
<p>当然，接下来我们还是先实现一个简单的RPC，再在上面一步步优化！</p>
<h2 id="为什么要用-rpc">为什么要用 RPC</h2>
<p>无感知调用<br>
RPC 可以定制化，可以减少传输过程之中的一些损耗。<br>
RPC 基于的协议可能是 TCP 或者 UDP 让网络传输更快。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://jiannanh.github.io/post/hello-gridea/</id>
        <link href="https://jiannanh.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>